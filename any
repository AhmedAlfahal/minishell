static void	exiting(t_ms *m)
{
	int	code;

	code = m->error_code;
	if (!m->rdln)
	{
		printf("exit\n");
		free_all(m, 1);
		exit(0);
	}
	if (m->cmds->args[0] && m->cmds->args[1] && !m->cmds->args[2])
	{
		code = ft_atol(m->cmds->args[1]) % 256;
		free_all(m, 2);
		f_free(m);
		printf("exit\n");
		exit(code);
	}
	else if (m->cmds->args[0] && m->cmds->args[1])
	{
		free_all(m, 2);
		f_free(m);
		printf("exit\n");
		exit(code);
	}
	else if (m->cmds->args[0])
		m->error_code = 1;
}

void	handler(int signal)
{
	if (signal == SIGINT)
	{
		printf("\n");
		rl_on_new_line();
		rl_replace_line("", 0);
		rl_redisplay();
		return ;
	}
	if (signal == SIGQUIT)
		return ;
}

int	main(int ac, char **av, char **env)
{
	t_ms	m;

	(void)ac;
	(void)av;
	m.error_code = 0;
	init_counter(&m, env);
	while (1)
	{
		signal(SIGINT, handler);
		signal(SIGQUIT, handler);
		m.error = 0;
		m.rdln = readline("minishell$:");
		add_history(m.rdln);
		if (!m.rdln)
			exiting(&m);
		pars(&m);
		if (m.c_cmds == 1 && !ft_strncmp("exit", m.cmds->args[0], 5))
			exiting(&m);
		if (m.error == 0)
			exce(&m);
		free_all(&m, 0);
	}
	free_all(&m, 1);
	return (0);
}